<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>月心月士的博客</title><link>https://www.moonheartmoon.com/</link><description>Recent content on 月心月士的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 11 May 2022 09:18:42 +0800</lastBuildDate><atom:link href="https://www.moonheartmoon.com/index.xml" rel="self" type="application/rss+xml"/><item><title>Envoy 中的 WebAssembly</title><link>https://www.moonheartmoon.com/posts/webassembly-in-envoy/</link><pubDate>Wed, 11 May 2022 09:18:42 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/webassembly-in-envoy/</guid><description>原文：https://github.com/proxy-wasm/spec/blob/master/docs/WebAssembly-in-Envoy.md
背景 截至 2019 年初，Envoy 是一个静态编译的二进制文件，其所有扩展都编译在构建时。这意味着提供自定义扩展的项目（例如 Istio）必须维护和分发自己的二进制文件，而不是使用官方和未修改的 Envoy 二进制文件。
对于无法控制其部署的项目，这甚至更成问题，因为任何更新和/或对扩展的错误修复需要构建新的二进制文件，生成版本，分发它，以及更重要的是，在生产中重新部署它。
这也意味着在部署的扩展和配置它们的控制平面之间经常存在版本差异。
解决方案 虽然部分问题可以使用动态可加载的 C++ 扩展来解决，但这在目前还不是一个可行的解决方案，因为，由于 Envoy 开发的速度很快，没有针对于扩展的稳定 ABI，甚至是 API，而且更新 Envoy 往往需要代码更改，这使得更新成为一个手动过程。
相反，我们决定通过使用带有稳定 ABI 的 WebAssembly 编写和交付 Envoy 扩展来解决这个问题，因为它带来了许多额外的好处(如下所述)。
什么是 WebAssembly？ WebAssembly (Wasm)是一种新兴的可执行代码的可移植二进制格式。代码在内存安全(针对主机)的沙箱中以接近本机的速度执行，具有明确定义的资源约束，以及用于与嵌入的主机环境(如代理)通信的 API。
优点 敏捷。 扩展可以在运行时直接从控制平面传递和重新加载。这意味着不仅每个人都可以使用正式版本和未经修改的代理版本来加载自定义扩展，而且任何错误修复和/或更新都可以在运行时推送和/或测试，而无需更新和/或重新部署新的二进制文件。
可靠性和隔离性。由于扩展部署在有资源约束的沙箱中，因此它们可能会崩溃和/或泄漏内存，而不会导致整个代理关闭。此外，可以限制 CPU 和内存的使用。
安全。由于扩展被部署在一个沙箱中，沙箱中有明确定义的用于与代理进行通信的 API，因此它们具有访问权限，并且只能修改有限数量的连接和/或请求属性。此外，由于代理协调这种交互，它可以隐藏或清理扩展中的敏感信息(例如 “Authorization” 和 “Cookie” HTTP 头，或客户端的 IP 地址)。
多样性。超过30种编程语言可以编译成 WebAssembly 模块，允许所有背景的开发人员(c，Go，Rust，Java，TypeScript 等)用自己选择的语言编写 Proxy-Wasm 扩展。
可维护性。 由于扩展是使用标准库编写的，独立于代理的代码库，我们可以提供一个稳定的 ABI。
便携性。 由于主机环境和扩展之间的接口是与代理无关的，因此使用 Proxy-Wasm 编写的扩展可以在各种代理中执行，例如 Envoy、NGINX、ATS，甚至可以在 gRPC 库中执行(假设它们都实现了标准)。</description></item><item><title>在 linux 系统通过修改 DSDT 修复 S3 睡眠</title><link>https://www.moonheartmoon.com/posts/linux-dsdt-fix-s3/</link><pubDate>Sun, 24 Apr 2022 01:10:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/linux-dsdt-fix-s3/</guid><description>解决方案参考 https://dev.to/epassaro/fix-suspend-issues-on-dell-7405-2-in-1-3l1b
与原文不同的是，他的设备是 Dell 7405 2-in-1 而我的是 Thinkbook 14P, 所以 DSDT 修改略有不同。
反编译出 dsl 之后，找到如下位置：
1 2 3 4 5 6 7 Name (NOS3, Package (0x04) { 0x03, 0x03, 0x00, 0x00 }) 替换为
1 2 3 4 5 6 7 Name (_S3, Package (0x04) { 0x03, 0x03, 0x00, 0x00 }) 同时将 DefinitionBlock (&amp;quot;&amp;quot;, &amp;quot;DSDT&amp;quot;, 1, &amp;quot;LENOVO&amp;quot;, &amp;quot;AMD&amp;quot;, 0x00001000) 替换为 DefinitionBlock (&amp;quot;&amp;quot;, &amp;quot;DSDT&amp;quot;, 1, &amp;quot;LENOVO&amp;quot;, &amp;quot;AMD&amp;quot;, 0x00001001)，这里是加了个版本号，让内核可以识别到。</description></item><item><title>在 aspnet core 中使用类似 javaagent 的方式注入程序集</title><link>https://www.moonheartmoon.com/posts/use-assembly-inject-in-aspnetcore-like-javaagent/</link><pubDate>Mon, 14 Feb 2022 10:31:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/use-assembly-inject-in-aspnetcore-like-javaagent/</guid><description>https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0#activation
通过这种方式, 可以实现不对原有项目做任何更改, 可以直接对已发布好的程序文件进行自定义程序集注入. 可以使用在 k8s 的 init-container 中注入统一的日志, 配置, 健康检查, 服务注册, 等等.
需要配置三个关键的环境变量:
使用 ASPNETCORE_HOSTINGSTARTUPASSEMBLIES 指定要使用的程序集 使用 DOTNET_ADDITIONAL_DEPS 指定要添加的依赖 使用 DOTNET_SHARED_STORE 来指定依赖查找的目录 另一个额外注意点是, 我们注入的程序集需要支持主程序的版本.</description></item><item><title>esxi 中的 CentOS lvm扩容磁盘</title><link>https://www.moonheartmoon.com/posts/esxi-zhong-de-centos-lvm-kuo-rong-ci-pan/</link><pubDate>Mon, 13 Jan 2020 21:21:00 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/esxi-zhong-de-centos-lvm-kuo-rong-ci-pan/</guid><description>首先在 vCenter 控制面板中增加磁盘容量并重启系统 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 root@server ~]# fdisk /dev/sda Command (m for help): p Disk /dev/sda: 171.</description></item><item><title>MIUI10 刷入 opengapps</title><link>https://www.moonheartmoon.com/posts/miui10-install-opengapps/</link><pubDate>Mon, 28 Jan 2019 17:20:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/miui10-install-opengapps/</guid><description>MIUI系统中没有带谷歌服务，而手动安装的非系统应用会有一些权限问题，导致奇怪的Bug，于是我考虑刷入opengapps。
这里我选择的是micro版本。
注意 刷入opengapps后已经修改了system分区，这时候不能直接开机。因为内核有验证system分区完整性，直接开机会卡米。这时需要再刷入Magisk或者SuperSU对内核进行patch，才能正常开机。
开机向导FC 开机后，此时开机向导已经被替换成了Google了的，这时遇到的第一个问题是开机向导过不去，因为MIUI系统对Android做了一些修改，导致Google的开机向导在在调用一些方法的时候FC。
需要禁用开机向导才能继续。
重启进入Recovery，在/system/build.prop 中加入如下代码后重启继续。
1 ro.setupwizard.mode=DISABLED 或者使用 这个Zip包 刷入禁用开机向导。
Webview丢失 开机后，很多应用FC，查看日志后发现没有检测到Webview，在开发者选项中查看Webview实现，发现是空的，怎么回事呢？因为opengapps替换了MIUI系统自带的WebviewGoogle，导致系统检测不到Webview。
这时打开opengapps安装包中的 gapps-remove.txt 文件，找到 /system/app/WebViewGoogle 这一行，把它删掉或者在前面加一个#注释掉这一行就行了。
App被覆盖 opengapps会移除一些系统应用，即使它不是stock版本的。这时我们需要使用配置文件。在配置文件中加入不想被覆盖的应用就好了。
比如日历被移除了，因为micro版本安装了Google日历，需要在配置文件中加入 CalendarGoogle 来防止MIUI日历被移除。
权限问题 如果遇到权限问题，并且无法在系统中给予权限的话，可以参考这篇官方Wiki进行设置。</description></item><item><title>MIUI 系统修复音频延迟</title><link>https://www.moonheartmoon.com/posts/miui_fix_audio_latency/</link><pubDate>Fri, 25 Jan 2019 23:19:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/miui_fix_audio_latency/</guid><description>在MIUI系统中，在玩某些音游（Arcaea）的时候，需要将延迟调的很高（200~300ms），才能使音画同步，而在原生系统中延迟却非常低（10~30ms）。
这一现象在我的小米6和小米平板4 plus中都遇到了。
之后我在Android官方文档中看到关于音频延迟时间的说明，其中提到：
当前没有 API 可以在运行时确定 Android 设备上通过任何路径的音频延迟时间。 不过，您可以使用下列硬件功能标记了解设备是否能为延迟时间提供任何保证：android.hardware.audio.low_latency 指示 45 毫秒或更短的持续输出延迟时间。 android.hardware.audio.pro 指示 20 毫秒或更短的持续往返延迟时间。
随后通过搜索，在MIUI论坛中发现了这篇帖子【利用android新特性 减低声音延迟】。
通过对比发现，原生系统中的/vendor/etc/permissions/下有android.hardware.audio.low_latency.xml、android.hardware.audio.pro.xml这两个文件，猜测是这两个文件标记了设备是否支持这两个特性，而这也与上文提到的文档中的描述一致。
手动将这两个文件复制到MIUI系统的/system/vendor/etc/permissions/中后，音频延迟问题解决了。
猜测：一些应用为了降低音频延迟，会检查设备是否支持高性能音频，如果不支持的话会采用传统的延迟更大的方式进行音频输出。
我制作了一个Magisk模块可以按照文中提供的方式对MIUI的音频延迟进行修复。
副作用：如果设备运行内存不足，可能会导致这些支持高性能音频的应用的声音卡顿爆音，这也是我在使用原生系统的时候经常遇到的，清理一下后台程序并重启应用就能解决。</description></item><item><title>MIUI 官方系统 deodex MIUI SystemUI</title><link>https://www.moonheartmoon.com/posts/miuisystemui_deodex/</link><pubDate>Mon, 24 Sep 2018 23:18:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/miuisystemui_deodex/</guid><description>之前发的修改国际版通知的教程中涉及到了修改MIUISystemUI.apk，好多人说找不到classes.dex文件，因为用的是官方系统。但是当时我用的是官改系统，整个系统都是deodex的，所以可以直接修改。
接下来我会讲解如何官方系统修改MIUISystemUI，理论上适用于其他系统apk（。
准备工作: Windows PC baksmali-xxx.jar, smali-xxx.jar，到这里下载最新的 https://bitbucket.org/JesusFreke/smali/downloads/ adb的基本操作（推荐将adb和fastboot加入环境变量） Java环境（百度去） 操作步骤： 手机开启adb调试，连接到电脑，确保驱动正确安装。 随便找一个地方建立文件夹，比如【miui】，将下载的baksmali-xxx.jar, smali-xxx.jar复制到这里。 启动命令行，进入【miui】文件夹，把需要的文件拉取到电脑上。执行命令： 反编译MiuiSystemUI.odex,会生成一个out目录。执行命令： 按需修改out目录中的smali文件。如修改国际版通知等等。 回编译smali文件成classes.dex, 执行命令： 用解压缩软件打开MiuiSystemUI.apk,将生成的classes.dex文件拖入其中，你就有一个deodex的MiuiSystemUI.apk了 直接替换文件到system或者使用magisk进行替换。</description></item><item><title>小米 6 刷 twrp 教程</title><link>https://www.moonheartmoon.com/posts/sagit-twrp-guide/</link><pubDate>Fri, 06 Oct 2017 22:14:23 +0800</pubDate><guid>https://www.moonheartmoon.com/posts/sagit-twrp-guide/</guid><description>准备：电脑，小米6一台，数据线
下载线刷工具 进入 http://www.miui.com/shuaji-393.html ，选择通用刷机工具点击下载, 然后安装。
下载recovery 进入 https://dl.twrp.me/sagit/ 选择最新的下载
放好recovery文件 进入刷机工具安装目录， 默认 C:\XiaoMi\XiaoMiFlash, 然后进入 Source\ThirdParty\Google\Android, 把刚刚下载的twrp-3.1.1-1-sagit.img放到这个目录。asad
新建刷recovery脚本 新建文本文件，修改名字为flashrecovery.bat，内容如下
fastboot flash recovery twrp-3.1.1-1-sagit.img fastboot boot twrp-3.1.1-1-sagit.img
重启到fastboot 长按音量增 + 电源键 ，等待 手机重启进入fastboot，然后将手机链接到电脑。
双击flash_recovery.bat文件，这时手机会自动重启进入recovery。</description></item></channel></rss>