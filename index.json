[{"content":"一个月前，由于 docker 使用体验不佳，加上当时正好遇到一个项目需要使用 Linux 环境编译，但是 WSL/WSL2 有一些小问题一直没解决，就顺势从 Windows 11 切换到了 Linux。\n选择哪个发行版？ 最开始我是准备用 ArchLinux 的，因为她的滚动更新策略我比较喜欢，以前使用过一个星期，由于一些电源管理的问题，本人太菜一直没修好，于是放弃了；公司服务器主要使用的是 Debian 9/10, 考虑到贴和工作环境，于是我选择了最新 的Debian 11。\n遇到的问题 网卡不工作 安装 Debian 11 的时候，遇到一个哭笑不得的问题：Debian 11 的 ISO 自带的内核是 5.10, 当时安装的时候就发现不对劲，Wi-Fi 不工作；一番搜索之后才发现我的笔记本网卡是 MT7921，要从 5.15 内核才支持。又是搜索了一番，发现原来 Debian 也有滚动更新的版本，于是下载了 Debian sid 的镜像进行安装。\nS3 睡眠失败 安装好用了一两天之后发现：睡眠了之后无法唤醒？点击睡眠之后无论是键盘鼠标还是电源键都无法唤醒，只能长按电源键断电。最开始以为是驱动问题，但是尝试各种方式无果，最后经过 TG 群的一位群友提醒，发现是因为设备太新，不支持 S3 睡眠，取而代之的是 Windows 的 新式待机：https://docs.microsoft.com/zh-cn/windows-hardware/design/device-experiences/modern-standby-vs-s3，经过一番搜索，找到了可用的方案：https://dev.to/epassaro/fix-suspend-issues-on-dell-7405-2-in-1-3l1b，通过修补 DSDT 来修复 S3 睡眠。\nWindows 软件问题 在国内无法避免的要使用一些通讯软件，如 微信，钉钉，企业微信等等，根据我的经验，Wine 下运行的软件或多或少都会有些小问题，最后决定采用 VM 方案，在 VirtualBox 中安装了一个精简版的 Windows 7 来运行这些软件，分配了 2 GB 内存，平时使用基本够用。\n其他都是一些小问题，网上解决方案很多，这里就不再赘述了。\n好的体验 首先我要由衷的感叹：**Linux 下的 docker 真是太好用了！**超级顺滑，再也不用那个超级重的 Docker Desktop For Windows 了；而且挂载目录也不用担心 IO 性能问题了；\n另外就是开发的体验变好了：可以很方便的使用一些之前在 Windows 下用起来很麻烦的命令，比如 make, gcc, 之前只能在 WSL 中使用；\n并且 Linux 下有统一的 shell 环境，不像 Windows 有 CMD/Powershell/WSL 还有为了使用一些 Linux 工具安装的 MSYS2/Cygwin 等等；\n另外 Linux 下有统一的包管理器，Windows 下我需要 Chocolatey/scoop/winget 换着用。\n常用的工具在 Linux 下都有：Jetbrains 全家桶，Lens，vscode，dbeaver，telegram，utools，Edge 等等，刚需的 Onedrive 有 onedriver 代替，clash for windows 换成了 systemd 管理的 clash。\n不好的体验 一些软件没有 Linux 版本，只能在 VM 中使用；\n偶尔遇到一些奇怪的问题，比如开机后 USB 键鼠失效，只能关机后开机解决；\nKDE 在拔出外接显示器再重新连接后，窗口全部挤在笔记本屏幕上；\n更新内核后 VMWare 的内核模块需要重新手动编译，我嫌麻烦就换 VirtualBox 了；\n以上都是我在一个月左右的体验，其中可能会有一些看起来很初级的问题，望各位体谅；最后附上系统信息：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18   _,met$$$$$gg. moon@tb14p-debian  ,g$$$$$$$$$$$$$$$P. -----------------  ,g$$P\u0026#34; \u0026#34;\u0026#34;\u0026#34;Y$$.\u0026#34;. OS: Debian GNU/Linux bookworm/sid x86_64  ,$$P\u0026#39; `$$$. Host: 20YN Lenovo ThinkBook 14p Gen 2 \u0026#39;,$$P ,ggs. `$$b: Kernel: 5.17.0-2-amd64 `d$$\u0026#39; ,$P\u0026#34;\u0026#39; . $$$ Uptime: 10 hours, 48 mins  $$P d$\u0026#39; , $$P Packages: 2957 (dpkg)  $$: $$. - ,d$$\u0026#39; Shell: zsh 5.8.1  $$; Y$b._ _,d$P\u0026#39; Resolution: 2240x1400  Y$$. `.`\u0026#34;Y$$$$P\u0026#34;\u0026#39; DE: Plasma 5.24.5  `$$b \u0026#34;-.__ WM: KWin  `Y$$ Theme: [Plasma], Breeze [GTK2/3]  `Y$$. Icons: [Plasma], breeze [GTK2/3]  `$$b. Terminal: konsole  `Y$$b. Terminal Font: FiraCode Nerd Font Mono 10  `\u0026#34;Y$b._ CPU: AMD Ryzen 7 5800H with Radeon Graphics (16) @ 3.200GHz  `\u0026#34;\u0026#34;\u0026#34; GPU: AMD ATI 04:00.0 Cezanne  Memory: 14509MiB / 28002MiB   ","permalink":"https://www.moonheartmoon.com/posts/switch-to-debian-sid/","summary":"一个月前，由于 docker 使用体验不佳，加上当时正好遇到一个项目需要使用 Linux 环境编译，但是 WSL/WSL2 有一些小问题一直没解决，就顺势从 Windows 11 切换到了 Linux。\n选择哪个发行版？ 最开始我是准备用 ArchLinux 的，因为她的滚动更新策略我比较喜欢，以前使用过一个星期，由于一些电源管理的问题，本人太菜一直没修好，于是放弃了；公司服务器主要使用的是 Debian 9/10, 考虑到贴和工作环境，于是我选择了最新 的Debian 11。\n遇到的问题 网卡不工作 安装 Debian 11 的时候，遇到一个哭笑不得的问题：Debian 11 的 ISO 自带的内核是 5.10, 当时安装的时候就发现不对劲，Wi-Fi 不工作；一番搜索之后才发现我的笔记本网卡是 MT7921，要从 5.15 内核才支持。又是搜索了一番，发现原来 Debian 也有滚动更新的版本，于是下载了 Debian sid 的镜像进行安装。\nS3 睡眠失败 安装好用了一两天之后发现：睡眠了之后无法唤醒？点击睡眠之后无论是键盘鼠标还是电源键都无法唤醒，只能长按电源键断电。最开始以为是驱动问题，但是尝试各种方式无果，最后经过 TG 群的一位群友提醒，发现是因为设备太新，不支持 S3 睡眠，取而代之的是 Windows 的 新式待机：https://docs.microsoft.com/zh-cn/windows-hardware/design/device-experiences/modern-standby-vs-s3，经过一番搜索，找到了可用的方案：https://dev.to/epassaro/fix-suspend-issues-on-dell-7405-2-in-1-3l1b，通过修补 DSDT 来修复 S3 睡眠。\nWindows 软件问题 在国内无法避免的要使用一些通讯软件，如 微信，钉钉，企业微信等等，根据我的经验，Wine 下运行的软件或多或少都会有些小问题，最后决定采用 VM 方案，在 VirtualBox 中安装了一个精简版的 Windows 7 来运行这些软件，分配了 2 GB 内存，平时使用基本够用。","title":"切换到 Debian sid 使用一个月的体验"},{"content":"原文：https://github.com/proxy-wasm/spec/blob/master/docs/WebAssembly-in-Envoy.md\n背景 截至 2019 年初，Envoy 是一个静态编译的二进制文件，其所有扩展都编译在构建时。这意味着提供自定义扩展的项目（例如 Istio）必须维护和分发自己的二进制文件，而不是使用官方和未修改的 Envoy 二进制文件。\n对于无法控制其部署的项目，这甚至更成问题，因为任何更新和/或对扩展的错误修复需要构建新的二进制文件，生成版本，分发它，以及更重要的是，在生产中重新部署它。\n这也意味着在部署的扩展和配置它们的控制平面之间经常存在版本差异。\n解决方案 虽然部分问题可以使用动态可加载的 C++ 扩展来解决，但这在目前还不是一个可行的解决方案，因为，由于 Envoy 开发的速度很快，没有针对于扩展的稳定 ABI，甚至是 API，而且更新 Envoy 往往需要代码更改，这使得更新成为一个手动过程。\n相反，我们决定通过使用带有稳定 ABI 的 WebAssembly 编写和交付 Envoy 扩展来解决这个问题，因为它带来了许多额外的好处(如下所述)。\n什么是 WebAssembly？ WebAssembly (Wasm)是一种新兴的可执行代码的可移植二进制格式。代码在内存安全(针对主机)的沙箱中以接近本机的速度执行，具有明确定义的资源约束，以及用于与嵌入的主机环境(如代理)通信的 API。\n优点   敏捷。 扩展可以在运行时直接从控制平面传递和重新加载。这意味着不仅每个人都可以使用正式版本和未经修改的代理版本来加载自定义扩展，而且任何错误修复和/或更新都可以在运行时推送和/或测试，而无需更新和/或重新部署新的二进制文件。\n  可靠性和隔离性。由于扩展部署在有资源约束的沙箱中，因此它们可能会崩溃和/或泄漏内存，而不会导致整个代理关闭。此外，可以限制 CPU 和内存的使用。\n  安全。由于扩展被部署在一个沙箱中，沙箱中有明确定义的用于与代理进行通信的 API，因此它们具有访问权限，并且只能修改有限数量的连接和/或请求属性。此外，由于代理协调这种交互，它可以隐藏或清理扩展中的敏感信息(例如 “Authorization” 和 “Cookie” HTTP 头，或客户端的 IP 地址)。\n  多样性。超过30种编程语言可以编译成 WebAssembly 模块，允许所有背景的开发人员(c，Go，Rust，Java，TypeScript 等)用自己选择的语言编写 Proxy-Wasm 扩展。\n  可维护性。 由于扩展是使用标准库编写的，独立于代理的代码库，我们可以提供一个稳定的 ABI。\n  便携性。 由于主机环境和扩展之间的接口是与代理无关的，因此使用 Proxy-Wasm 编写的扩展可以在各种代理中执行，例如 Envoy、NGINX、ATS，甚至可以在 gRPC 库中执行(假设它们都实现了标准)。\n  缺点   由于需要启动许多虚拟机，每个虚拟机都有自己的内存块，因此内存使用率较高\n  由于需要在沙箱内外复制大量数据，扩展转码负载的性能较低。\n  与 cpu 相关的扩展的性能较低。与本机代码相比，预计放慢速度小于2倍。\n  增加了二进制文件的大小，因为需要包括 Wasm 运行时。 WAVM 大约20mb，v8大约10mb。\n  WebAssembly 的生态系统还很年轻，目前的发展主要集中在浏览器内的使用上，JavaScript 被认为是主机环境。\n  高级概述 使用Proxy-Wasm，开发人员可以使用他们选择的编程语言编写代理扩展， 理想情况下，使用我们提供的特定于语言的库。然后将这些扩展编译为 便携式 Wasm 模块，并以该格式分发。\n在代理端，一旦加载了 Wasm 模块（直接从磁盘加载或从 xDS 上的控制平面），它经过验证是否符合定义的 Proxy-Wasm 接口，并且 使用嵌入式 Wasm 运行时实例化，该运行时在每个运行时中创建一个新的 Wasm 虚拟机 工作线程。\n对于 Envoy 的每个扩展类型，我们创建了一个填充程序来转换扩展的接口 到 Proxy-Wasm 调用，因此这些接口与本机（C++）Envoy 中使用的接口非常相似 扩展，拥抱事件驱动的编程模型。\n运行时 为了执行提供的 Proxy-Wasm 扩展，proxy 需要嵌入一个 Wasm 运行时，这将 在沙盒中执行代码。目前，有两个 C 或 C++ Wasm 运行时：基于 LLVM 的 WAVM 和 V8.目前，WAVM和V8都嵌入在Envoy中，我们可以选择一个或另一个。 在配置中，但我们最有可能使用只有一个运行时的上游解决方案。\n虚拟机 当 Wasm 运行时实例化 Wasm 模块时，它会创建一个 Wasm 虚拟机（VM 实例） 为了它。\n有几种模型可用于在 VM 实例和 Proxy-Wasm 扩展之间进行映射。最终，它是 在以下方面进行权衡：启动延迟和资源使用，以及隔离和安全性。\n*每个 Wasm 模块的每个工作线程的持久进程内 VM（在多个已配置的模块之间共享） 使用 Wasm 扩展）。 单个 Wasm 模块可以包含多个扩展（例如，侦听器筛选器和传输套接字、 都在一个包中）。对于每个 Wasm 模块，单个持久性进程内 VM 实例为 创建，并且可以（但不必）由所有引用该扩展的 Proxy-Wasm 扩展共享 配置中的 Wasm 模块。\n  每个 Wasm 扩展的每个工作线程的持久性进程内 VM。 将为每个 Wasm 扩展创建一个持久的进程内 VM 实例，并由 共享 在配置中引用给定 Wasm 模块的所有 Proxy-Wasm 扩展，类似于 本机（C++）扩展今天被实例化。\n  每个工作线程的永久进程内 VM，每个配置的 Wasm 扩展使用量。 为代理 Wasm 的每次配置使用创建一个持久的进程内 VM 实例 在配置中引用给定的 Wasm 模块的扩展。此模型提供更强大的功能 隔离保证比以前的模型，在多租户中应该是首选 环境。\n  临时（按请求）进程内 VM。 将为每个请求、每个 Proxy-Wasm 扩展创建一个新的临时进程内 VM 实例， 并在请求完成后立即销毁。预计这将是令人望而却步的 贵。\n  进程外虚拟机**。 这超出了本文档的范围，但对于加载不受信任的部署（并且可能 恶意）多租户环境中的 Wasm 模块，需要强大的安全保证和 想要防止类似幽灵的攻击，代理应该与进程外的Wasm进行通信 实现 Proxy-Wasm 的沙盒（例如，使用 Filters-over-gRPC 或共享内存），这将 代表其执行 Wasm 模块并将结果流回代理。\n  主机环境 沙盒化的 Wasm 虚拟机使用清晰的接口与嵌入主机环境（即代理）进行通信 定义的接口，包括：从 Wasm 模块导出的函数，代理可以调用这些函数， Wasm VM 可以调用的帮助器函数，以及用于内存管理的 Wasm 函数。\n由于此接口级别非常低且相当稳定，因此它允许我们定义稳定的 ABI （将在单独的文档中定义的函数原型），扩展可以使用。\n支持的语言和 API Proxy-Wasm扩展可以用任何针对WebAssembly的语言编写，但是因为那些 扩展需要遵循上述接口，我们将为 很少选择的语言（C / C++使用Emscripten，Rust，Go和TypeScript），以加快 开发这些扩展。\n虽然理论上任何Wasm模块都符合ABI，但无论它是用哪种语言编写的 在，应该开箱即用，Wasm生态系统仍然非常年轻，缺乏标准， 特别是对于非 Web 环境，某些语言具有假设和/或要求 关于它们在执行它们的主机环境，例如Go编译的Wasm模块使用syscall/js， 并期望主机环境是 JavaScript。\n控制平面 （xDS） 集成 Proxy-Wasm扩展可以通过使用Envoy的在配置中引用它们来加载 Config：:D ataSource，它可以指向磁盘上的文件，也可以包含已发送的内联 Wasm 模块 从控制平面 （xDS）。我们正在扩展此接口，以支持从 HTTP服务器也是如此。由于加载的Wasm模块将被执行，因此更强的检查，例如 强烈建议使用 SHA256 校验和或扩展的数字签名。\n故障检测和通知 如果 Wasm VM 崩溃（例如，由于 Wasm 扩展中的错误），代理应创建一个新的 VM 的实例，记录有关崩溃的信息，并将其暴露给外部系统（例如 使用统计信息），以便控制平面可以对此信息采取行动。\n理想情况下，代理还应跟踪崩溃次数，并且在达到限制时应停止。 重新启动 Wasm VM（以防止进入崩溃循环），并开始拒绝连接和/或 将错误返回给客户端。\n可配置的资源约束 每个已配置的 Proxy-Wasm 扩展都可以设置资源约束（每个 VM 可以的最大内存 分配，以及它在每次调用期间可以消耗的最大 CPU 时间），以限制资源 用法。\n可配置的 API 限制 可以为每个已配置的 Proxy-Wasm 扩展限制可用 API 的列表，以便 仅计算扩展（例如压缩）将无法访问它们不需要的 API（例如 HTTP/gRPC sidecalls）。\n此外，某些 API 可以清理输入和/或输出（例如，删除返回的标头） 值，或限制 HTTP/gRPC 端调用可以进行的主机列表）。\n生态系统（“Proxy-Wasm extensions Store”） 一旦它起飞并在社区中采用，就要完成。\n","permalink":"https://www.moonheartmoon.com/posts/webassembly-in-envoy/","summary":"原文：https://github.com/proxy-wasm/spec/blob/master/docs/WebAssembly-in-Envoy.md\n背景 截至 2019 年初，Envoy 是一个静态编译的二进制文件，其所有扩展都编译在构建时。这意味着提供自定义扩展的项目（例如 Istio）必须维护和分发自己的二进制文件，而不是使用官方和未修改的 Envoy 二进制文件。\n对于无法控制其部署的项目，这甚至更成问题，因为任何更新和/或对扩展的错误修复需要构建新的二进制文件，生成版本，分发它，以及更重要的是，在生产中重新部署它。\n这也意味着在部署的扩展和配置它们的控制平面之间经常存在版本差异。\n解决方案 虽然部分问题可以使用动态可加载的 C++ 扩展来解决，但这在目前还不是一个可行的解决方案，因为，由于 Envoy 开发的速度很快，没有针对于扩展的稳定 ABI，甚至是 API，而且更新 Envoy 往往需要代码更改，这使得更新成为一个手动过程。\n相反，我们决定通过使用带有稳定 ABI 的 WebAssembly 编写和交付 Envoy 扩展来解决这个问题，因为它带来了许多额外的好处(如下所述)。\n什么是 WebAssembly？ WebAssembly (Wasm)是一种新兴的可执行代码的可移植二进制格式。代码在内存安全(针对主机)的沙箱中以接近本机的速度执行，具有明确定义的资源约束，以及用于与嵌入的主机环境(如代理)通信的 API。\n优点   敏捷。 扩展可以在运行时直接从控制平面传递和重新加载。这意味着不仅每个人都可以使用正式版本和未经修改的代理版本来加载自定义扩展，而且任何错误修复和/或更新都可以在运行时推送和/或测试，而无需更新和/或重新部署新的二进制文件。\n  可靠性和隔离性。由于扩展部署在有资源约束的沙箱中，因此它们可能会崩溃和/或泄漏内存，而不会导致整个代理关闭。此外，可以限制 CPU 和内存的使用。\n  安全。由于扩展被部署在一个沙箱中，沙箱中有明确定义的用于与代理进行通信的 API，因此它们具有访问权限，并且只能修改有限数量的连接和/或请求属性。此外，由于代理协调这种交互，它可以隐藏或清理扩展中的敏感信息(例如 “Authorization” 和 “Cookie” HTTP 头，或客户端的 IP 地址)。\n  多样性。超过30种编程语言可以编译成 WebAssembly 模块，允许所有背景的开发人员(c，Go，Rust，Java，TypeScript 等)用自己选择的语言编写 Proxy-Wasm 扩展。\n  可维护性。 由于扩展是使用标准库编写的，独立于代理的代码库，我们可以提供一个稳定的 ABI。\n  便携性。 由于主机环境和扩展之间的接口是与代理无关的，因此使用 Proxy-Wasm 编写的扩展可以在各种代理中执行，例如 Envoy、NGINX、ATS，甚至可以在 gRPC 库中执行(假设它们都实现了标准)。","title":"Envoy 中的 WebAssembly"},{"content":" 解决方案参考 https://dev.to/epassaro/fix-suspend-issues-on-dell-7405-2-in-1-3l1b\n 与原文不同的是，他的设备是 Dell 7405 2-in-1 而我的是 Thinkbook 14P, 所以 DSDT 修改略有不同。\n反编译出 dsl 之后，找到如下位置：\n1 2 3 4 5 6 7   Name (NOS3, Package (0x04)  {  0x03,  0x03,  0x00,  0x00  })   替换为\n1 2 3 4 5 6 7   Name (_S3, Package (0x04)  {  0x03,  0x03,  0x00,  0x00  })   同时将 DefinitionBlock (\u0026quot;\u0026quot;, \u0026quot;DSDT\u0026quot;, 1, \u0026quot;LENOVO\u0026quot;, \u0026quot;AMD\u0026quot;, 0x00001000) 替换为 DefinitionBlock (\u0026quot;\u0026quot;, \u0026quot;DSDT\u0026quot;, 1, \u0026quot;LENOVO\u0026quot;, \u0026quot;AMD\u0026quot;, 0x00001001)，这里是加了个版本号，让内核可以识别到。\n","permalink":"https://www.moonheartmoon.com/posts/linux-dsdt-fix-s3/","summary":"解决方案参考 https://dev.to/epassaro/fix-suspend-issues-on-dell-7405-2-in-1-3l1b\n 与原文不同的是，他的设备是 Dell 7405 2-in-1 而我的是 Thinkbook 14P, 所以 DSDT 修改略有不同。\n反编译出 dsl 之后，找到如下位置：\n1 2 3 4 5 6 7   Name (NOS3, Package (0x04)  {  0x03,  0x03,  0x00,  0x00  })   替换为\n1 2 3 4 5 6 7   Name (_S3, Package (0x04)  {  0x03,  0x03,  0x00,  0x00  })   同时将 DefinitionBlock (\u0026quot;\u0026quot;, \u0026quot;DSDT\u0026quot;, 1, \u0026quot;LENOVO\u0026quot;, \u0026quot;AMD\u0026quot;, 0x00001000) 替换为 DefinitionBlock (\u0026quot;\u0026quot;, \u0026quot;DSDT\u0026quot;, 1, \u0026quot;LENOVO\u0026quot;, \u0026quot;AMD\u0026quot;, 0x00001001)，这里是加了个版本号，让内核可以识别到。","title":"在 linux 系统通过修改 DSDT 修复 S3 睡眠"},{"content":" https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0#activation\n 通过这种方式, 可以实现不对原有项目做任何更改, 可以直接对已发布好的程序文件进行自定义程序集注入. 可以使用在 k8s 的 init-container 中注入统一的日志, 配置, 健康检查, 服务注册, 等等.\n需要配置三个关键的环境变量:\n 使用 ASPNETCORE_HOSTINGSTARTUPASSEMBLIES 指定要使用的程序集 使用 DOTNET_ADDITIONAL_DEPS 指定要添加的依赖 使用 DOTNET_SHARED_STORE 来指定依赖查找的目录  另一个额外注意点是, 我们注入的程序集需要支持主程序的版本.\n","permalink":"https://www.moonheartmoon.com/posts/use-assembly-inject-in-aspnetcore-like-javaagent/","summary":"https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/platform-specific-configuration?view=aspnetcore-6.0#activation\n 通过这种方式, 可以实现不对原有项目做任何更改, 可以直接对已发布好的程序文件进行自定义程序集注入. 可以使用在 k8s 的 init-container 中注入统一的日志, 配置, 健康检查, 服务注册, 等等.\n需要配置三个关键的环境变量:\n 使用 ASPNETCORE_HOSTINGSTARTUPASSEMBLIES 指定要使用的程序集 使用 DOTNET_ADDITIONAL_DEPS 指定要添加的依赖 使用 DOTNET_SHARED_STORE 来指定依赖查找的目录  另一个额外注意点是, 我们注入的程序集需要支持主程序的版本.","title":"在 aspnet core 中使用类似 javaagent 的方式注入程序集"},{"content":" 首先在 vCenter 控制面板中增加磁盘容量并重启系统  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  root@server ~]# fdisk /dev/sda Command (m for help): p  Disk /dev/sda: 171.8 GB, 171798691840 bytes, 335544320 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000dbca9  Device Boot Start End Blocks Id System /dev/sda1 * 2048 2099199 1048576 83 Linux /dev/sda2 2099200 167772159 82836480 83 Linux  Command (m for help): d Partition number (1,2, default 2): 2 Partition 2 is deleted  Command (m for help): n Partition type: p primary (1 primary, 0 extended, 3 free) e extended Select (default p): p Partition number (2-4, default 2): First sector (2099200-335544319, default 2099200): Using default value 2099200 Last sector, +sectors or +size{K,M,G} (2099200-335544319, default 335544319): Using default value 335544319 Partition 2 of type Linux and of size 159 GiB is set  Command (m for help): p  Disk /dev/sda: 171.8 GB, 171798691840 bytes, 335544320 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000dbca9  Device Boot Start End Blocks Id System /dev/sda1 * 2048 2099199 1048576 83 Linux /dev/sda2 2099200 335544319 166722560 83 Linux  Command (m for help): w The partition table has been altered!  Calling ioctl() to re-read partition table.  WARNING: Re-reading the partition table failed with error 16: Device or resource busy The kernel still uses the old table. The new table will be used at the next reboot or after you run partprobe(8) or kpartx(8) Syncing disks.   使用 fdisk 扩容分区  1 2 3  root@server /]# pvresize /dev/sda2 Physical volume \u0026#34;/dev/sda2\u0026#34; changed 1 physical volume(s) resized or updated / 0 physical volume(s) not resized   使用 pvresize  1 2 3  root@server /]# pvresize /dev/sda2 Physical volume \u0026#34;/dev/sda2\u0026#34; changed 1 physical volume(s) resized or updated / 0 physical volume(s) not resized   使用 lvextend 扩容扩容 lvm  1 2 3  root@server /]# lvextend -l +100%FREE /dev/mapper/centos-root Size of logical volume centos/root changed from 75.12 GiB (19231 extents) to 155.12 GiB (39711 extents). Logical volume centos/root successfully resized.   使用 xfs_growfs  1 2 3 4 5 6 7 8 9 10 11  root@server /]# xfs_growfs /dev/centos/root meta-data=/dev/mapper/centos-root isize=512 agcount=9, agsize=2301440 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0 spinodes=0 data = bsize=4096 blocks=19692544, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=1 log =internal bsize=4096 blocks=4495, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 data blocks changed from 19692544 to 40664064   ","permalink":"https://www.moonheartmoon.com/posts/esxi-zhong-de-centos-lvm-kuo-rong-ci-pan/","summary":"首先在 vCenter 控制面板中增加磁盘容量并重启系统  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  root@server ~]# fdisk /dev/sda Command (m for help): p  Disk /dev/sda: 171.","title":"esxi 中的 CentOS lvm扩容磁盘"},{"content":"MIUI系统中没有带谷歌服务，而手动安装的非系统应用会有一些权限问题，导致奇怪的Bug，于是我考虑刷入opengapps。\n这里我选择的是micro版本。\n注意 刷入opengapps后已经修改了system分区，这时候不能直接开机。因为内核有验证system分区完整性，直接开机会卡米。这时需要再刷入Magisk或者SuperSU对内核进行patch，才能正常开机。\n开机向导FC 开机后，此时开机向导已经被替换成了Google了的，这时遇到的第一个问题是开机向导过不去，因为MIUI系统对Android做了一些修改，导致Google的开机向导在在调用一些方法的时候FC。\n需要禁用开机向导才能继续。\n重启进入Recovery，在/system/build.prop 中加入如下代码后重启继续。\n1  ro.setupwizard.mode=DISABLED   或者使用 这个Zip包 刷入禁用开机向导。\nWebview丢失 开机后，很多应用FC，查看日志后发现没有检测到Webview，在开发者选项中查看Webview实现，发现是空的，怎么回事呢？因为opengapps替换了MIUI系统自带的WebviewGoogle，导致系统检测不到Webview。\n这时打开opengapps安装包中的 gapps-remove.txt 文件，找到 /system/app/WebViewGoogle 这一行，把它删掉或者在前面加一个#注释掉这一行就行了。\nApp被覆盖 opengapps会移除一些系统应用，即使它不是stock版本的。这时我们需要使用配置文件。在配置文件中加入不想被覆盖的应用就好了。\n比如日历被移除了，因为micro版本安装了Google日历，需要在配置文件中加入 CalendarGoogle 来防止MIUI日历被移除。\n权限问题 如果遇到权限问题，并且无法在系统中给予权限的话，可以参考这篇官方Wiki进行设置。\n","permalink":"https://www.moonheartmoon.com/posts/miui10-install-opengapps/","summary":"MIUI系统中没有带谷歌服务，而手动安装的非系统应用会有一些权限问题，导致奇怪的Bug，于是我考虑刷入opengapps。\n这里我选择的是micro版本。\n注意 刷入opengapps后已经修改了system分区，这时候不能直接开机。因为内核有验证system分区完整性，直接开机会卡米。这时需要再刷入Magisk或者SuperSU对内核进行patch，才能正常开机。\n开机向导FC 开机后，此时开机向导已经被替换成了Google了的，这时遇到的第一个问题是开机向导过不去，因为MIUI系统对Android做了一些修改，导致Google的开机向导在在调用一些方法的时候FC。\n需要禁用开机向导才能继续。\n重启进入Recovery，在/system/build.prop 中加入如下代码后重启继续。\n1  ro.setupwizard.mode=DISABLED   或者使用 这个Zip包 刷入禁用开机向导。\nWebview丢失 开机后，很多应用FC，查看日志后发现没有检测到Webview，在开发者选项中查看Webview实现，发现是空的，怎么回事呢？因为opengapps替换了MIUI系统自带的WebviewGoogle，导致系统检测不到Webview。\n这时打开opengapps安装包中的 gapps-remove.txt 文件，找到 /system/app/WebViewGoogle 这一行，把它删掉或者在前面加一个#注释掉这一行就行了。\nApp被覆盖 opengapps会移除一些系统应用，即使它不是stock版本的。这时我们需要使用配置文件。在配置文件中加入不想被覆盖的应用就好了。\n比如日历被移除了，因为micro版本安装了Google日历，需要在配置文件中加入 CalendarGoogle 来防止MIUI日历被移除。\n权限问题 如果遇到权限问题，并且无法在系统中给予权限的话，可以参考这篇官方Wiki进行设置。","title":"MIUI10 刷入 opengapps"},{"content":"在MIUI系统中，在玩某些音游（Arcaea）的时候，需要将延迟调的很高（200~300ms），才能使音画同步，而在原生系统中延迟却非常低（10~30ms）。\n这一现象在我的小米6和小米平板4 plus中都遇到了。\n之后我在Android官方文档中看到关于音频延迟时间的说明，其中提到：\n 当前没有 API 可以在运行时确定 Android 设备上通过任何路径的音频延迟时间。 不过，您可以使用下列硬件功能标记了解设备是否能为延迟时间提供任何保证：android.hardware.audio.low_latency 指示 45 毫秒或更短的持续输出延迟时间。 android.hardware.audio.pro 指示 20 毫秒或更短的持续往返延迟时间。\n 随后通过搜索，在MIUI论坛中发现了这篇帖子【利用android新特性 减低声音延迟】。\n通过对比发现，原生系统中的/vendor/etc/permissions/下有android.hardware.audio.low_latency.xml、android.hardware.audio.pro.xml这两个文件，猜测是这两个文件标记了设备是否支持这两个特性，而这也与上文提到的文档中的描述一致。\n手动将这两个文件复制到MIUI系统的/system/vendor/etc/permissions/中后，音频延迟问题解决了。\n猜测：一些应用为了降低音频延迟，会检查设备是否支持高性能音频，如果不支持的话会采用传统的延迟更大的方式进行音频输出。\n我制作了一个Magisk模块可以按照文中提供的方式对MIUI的音频延迟进行修复。\n副作用：如果设备运行内存不足，可能会导致这些支持高性能音频的应用的声音卡顿爆音，这也是我在使用原生系统的时候经常遇到的，清理一下后台程序并重启应用就能解决。\n","permalink":"https://www.moonheartmoon.com/posts/miui_fix_audio_latency/","summary":"在MIUI系统中，在玩某些音游（Arcaea）的时候，需要将延迟调的很高（200~300ms），才能使音画同步，而在原生系统中延迟却非常低（10~30ms）。\n这一现象在我的小米6和小米平板4 plus中都遇到了。\n之后我在Android官方文档中看到关于音频延迟时间的说明，其中提到：\n 当前没有 API 可以在运行时确定 Android 设备上通过任何路径的音频延迟时间。 不过，您可以使用下列硬件功能标记了解设备是否能为延迟时间提供任何保证：android.hardware.audio.low_latency 指示 45 毫秒或更短的持续输出延迟时间。 android.hardware.audio.pro 指示 20 毫秒或更短的持续往返延迟时间。\n 随后通过搜索，在MIUI论坛中发现了这篇帖子【利用android新特性 减低声音延迟】。\n通过对比发现，原生系统中的/vendor/etc/permissions/下有android.hardware.audio.low_latency.xml、android.hardware.audio.pro.xml这两个文件，猜测是这两个文件标记了设备是否支持这两个特性，而这也与上文提到的文档中的描述一致。\n手动将这两个文件复制到MIUI系统的/system/vendor/etc/permissions/中后，音频延迟问题解决了。\n猜测：一些应用为了降低音频延迟，会检查设备是否支持高性能音频，如果不支持的话会采用传统的延迟更大的方式进行音频输出。\n我制作了一个Magisk模块可以按照文中提供的方式对MIUI的音频延迟进行修复。\n副作用：如果设备运行内存不足，可能会导致这些支持高性能音频的应用的声音卡顿爆音，这也是我在使用原生系统的时候经常遇到的，清理一下后台程序并重启应用就能解决。","title":"MIUI 系统修复音频延迟"},{"content":"之前发的修改国际版通知的教程中涉及到了修改MIUISystemUI.apk，好多人说找不到classes.dex文件，因为用的是官方系统。但是当时我用的是官改系统，整个系统都是deodex的，所以可以直接修改。\n接下来我会讲解如何官方系统修改MIUISystemUI，理论上适用于其他系统apk（。\n准备工作:  Windows PC baksmali-xxx.jar, smali-xxx.jar，到这里下载最新的 https://bitbucket.org/JesusFreke/smali/downloads/ adb的基本操作（推荐将adb和fastboot加入环境变量） Java环境（百度去）  操作步骤：  手机开启adb调试，连接到电脑，确保驱动正确安装。 随便找一个地方建立文件夹，比如【miui】，将下载的baksmali-xxx.jar, smali-xxx.jar复制到这里。 启动命令行，进入【miui】文件夹，把需要的文件拉取到电脑上。执行命令： 反编译MiuiSystemUI.odex,会生成一个out目录。执行命令： 按需修改out目录中的smali文件。如修改国际版通知等等。 回编译smali文件成classes.dex, 执行命令： 用解压缩软件打开MiuiSystemUI.apk,将生成的classes.dex文件拖入其中，你就有一个deodex的MiuiSystemUI.apk了 直接替换文件到system或者使用magisk进行替换。  ","permalink":"https://www.moonheartmoon.com/posts/miuisystemui_deodex/","summary":"之前发的修改国际版通知的教程中涉及到了修改MIUISystemUI.apk，好多人说找不到classes.dex文件，因为用的是官方系统。但是当时我用的是官改系统，整个系统都是deodex的，所以可以直接修改。\n接下来我会讲解如何官方系统修改MIUISystemUI，理论上适用于其他系统apk（。\n准备工作:  Windows PC baksmali-xxx.jar, smali-xxx.jar，到这里下载最新的 https://bitbucket.org/JesusFreke/smali/downloads/ adb的基本操作（推荐将adb和fastboot加入环境变量） Java环境（百度去）  操作步骤：  手机开启adb调试，连接到电脑，确保驱动正确安装。 随便找一个地方建立文件夹，比如【miui】，将下载的baksmali-xxx.jar, smali-xxx.jar复制到这里。 启动命令行，进入【miui】文件夹，把需要的文件拉取到电脑上。执行命令： 反编译MiuiSystemUI.odex,会生成一个out目录。执行命令： 按需修改out目录中的smali文件。如修改国际版通知等等。 回编译smali文件成classes.dex, 执行命令： 用解压缩软件打开MiuiSystemUI.apk,将生成的classes.dex文件拖入其中，你就有一个deodex的MiuiSystemUI.apk了 直接替换文件到system或者使用magisk进行替换。  ","title":"MIUI 官方系统 deodex MIUI SystemUI"},{"content":"准备：电脑，小米6一台，数据线\n 下载线刷工具  进入 http://www.miui.com/shuaji-393.html ，选择通用刷机工具点击下载, 然后安装。\n下载recovery  进入 https://dl.twrp.me/sagit/ 选择最新的下载\n放好recovery文件  进入刷机工具安装目录， 默认 C:\\XiaoMi\\XiaoMiFlash, 然后进入 Source\\ThirdParty\\Google\\Android, 把刚刚下载的twrp-3.1.1-1-sagit.img放到这个目录。asad\n新建刷recovery脚本  新建文本文件，修改名字为flashrecovery.bat，内容如下\nfastboot flash recovery twrp-3.1.1-1-sagit.img fastboot boot twrp-3.1.1-1-sagit.img\n重启到fastboot  长按音量增 + 电源键 ，等待 手机重启进入fastboot，然后将手机链接到电脑。\n双击flash_recovery.bat文件，这时手机会自动重启进入recovery。  ","permalink":"https://www.moonheartmoon.com/posts/sagit-twrp-guide/","summary":"准备：电脑，小米6一台，数据线\n 下载线刷工具  进入 http://www.miui.com/shuaji-393.html ，选择通用刷机工具点击下载, 然后安装。\n下载recovery  进入 https://dl.twrp.me/sagit/ 选择最新的下载\n放好recovery文件  进入刷机工具安装目录， 默认 C:\\XiaoMi\\XiaoMiFlash, 然后进入 Source\\ThirdParty\\Google\\Android, 把刚刚下载的twrp-3.1.1-1-sagit.img放到这个目录。asad\n新建刷recovery脚本  新建文本文件，修改名字为flashrecovery.bat，内容如下\nfastboot flash recovery twrp-3.1.1-1-sagit.img fastboot boot twrp-3.1.1-1-sagit.img\n重启到fastboot  长按音量增 + 电源键 ，等待 手机重启进入fastboot，然后将手机链接到电脑。\n双击flash_recovery.bat文件，这时手机会自动重启进入recovery。  ","title":"小米 6 刷 twrp 教程"}]